import 'dart:ui';

class Language {
  final String code;
  final String name;
  final String flag;

  const Language({required this.code, required this.name, required this.flag});

  factory Language.fromJson(Map<String, dynamic> json) {
    return Language(
      code: json['code'] as String,
      name: json['name'] as String,
      flag: json['flag'] as String,
    );
  }

  Map<String, dynamic> toJson() => {'code': code, 'name': name, 'flag': flag};

  static const List<Language> list = [
    Language(code: 'en-US', name: 'English (US)', flag: 'ðŸ‡ºðŸ‡¸'),
    Language(code: 'en-GB', name: 'English (UK)', flag: 'ðŸ‡¬ðŸ‡§'),
    Language(code: 'es-ES', name: 'Spanish (Spain)', flag: 'ðŸ‡ªðŸ‡¸'),
    Language(code: 'es-MX', name: 'Spanish (Mexico)', flag: 'ðŸ‡²ðŸ‡½'),
    Language(code: 'fr-FR', name: 'French', flag: 'ðŸ‡«ðŸ‡·'),
    Language(code: 'de-DE', name: 'German', flag: 'ðŸ‡©ðŸ‡ª'),
    Language(code: 'it-IT', name: 'Italian', flag: 'ðŸ‡®ðŸ‡¹'),
    Language(code: 'pt-BR', name: 'Portuguese (Brazil)', flag: 'ðŸ‡§ðŸ‡·'),
    Language(code: 'pt-PT', name: 'Portuguese (Portugal)', flag: 'ðŸ‡µðŸ‡¹'),
    Language(code: 'ru-RU', name: 'Russian', flag: 'ðŸ‡·ðŸ‡º'),
    Language(code: 'zh-CN', name: 'Chinese (Simplified)', flag: 'ðŸ‡¨ðŸ‡³'),
    Language(code: 'zh-TW', name: 'Chinese (Traditional)', flag: 'ðŸ‡¹ðŸ‡¼'),
    Language(code: 'ja-JP', name: 'Japanese', flag: 'ðŸ‡¯ðŸ‡µ'),
    Language(code: 'ko-KR', name: 'Korean', flag: 'ðŸ‡°ðŸ‡·'),
    Language(code: 'ar-SA', name: 'Arabic', flag: 'ðŸ‡¸ðŸ‡¦'),
    Language(code: 'hi-IN', name: 'Hindi', flag: 'ðŸ‡®ðŸ‡³'),
    Language(code: 'th-TH', name: 'Thai', flag: 'ðŸ‡¹ðŸ‡­'),
    Language(code: 'vi-VN', name: 'Vietnamese', flag: 'ðŸ‡»ðŸ‡³'),
    Language(code: 'id-ID', name: 'Indonesian', flag: 'ðŸ‡®ðŸ‡©'),
    Language(code: 'ms-MY', name: 'Malay', flag: 'ðŸ‡²ðŸ‡¾'),
  ];

  static Language? findByCode(String code) {
    return list.firstWhere(
      (lang) => lang.code == code,
      orElse: () => list.first,
    );
  }

  static Language findByLocale(Locale locale) {
    final languageCode = locale.languageCode;
    final countryCode = locale.countryCode;
    final localeString = countryCode != null
        ? '$languageCode-$countryCode'
        : languageCode;

    return list.firstWhere(
      (lang) => lang.code == localeString,
      orElse: () {
        // Fallback to language code only (e.g., "en")
        return list.firstWhere(
          (lang) => lang.code.startsWith('$languageCode-'),
          orElse: () => list.first,
        );
      },
    );
  }
}
